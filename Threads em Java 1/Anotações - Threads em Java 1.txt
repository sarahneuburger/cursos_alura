Anotações - Threads em Java 1

- Ensinar a aplicação a fazer várias coisas ao mesmo tempo;
- Java é utilizado automaticamente no Java;
- JConsole, visualiza as execuções em andamente e consegue se conectar as VMs;
- A JVM faz automaticamente o uso de threads para coletar objetos abandonados 
	na memória. Essas threads (que na verdade são várias) chamamos de 
	Garbage Collector (que traduzido do inglês, significa "coletor de 
	lixo" ou "lixeiro"). Ele é responsável por jogar fora todos os 
	objetos que não estão sendo referenciados por nenhum outro objeto;
- Além disso, temos vários threads relacionados com RMI. Aquele RMI é uma 
	tecnologia para conectar duas JVMs. Para não travar a aplicação 
	principal, as conexões RMI também são tratadas em threads separadas.

---------

    * Através das Threads podemos executar tarefas em paralelo;
    * Uma classe que implementa a interface Runnable define a tarefa que o Thread executará;
    * O construtor da classe Thread recebe esse Runnable;
    * Devemos inicializar uma Thread explicitamente através do método start();
    * Através do Thread.sleep(millis) podemos mandar uma thread dormir;
    * Java suporta Threads nativamente;
    * Java mapeia os Threads para o Sistema Operacional;
    * A ordem de execução depende da JVM e não do nosso código.

---------

- Todo o bloco synchronized será executado de uma vez só, de maneira atômica. Até pode ser 
	que o escalonador para a thread no meio, para alguma outra thread executar uma outra 
	coisa, mas nenhuma outra thread pode entrar nesse bloco enquanto aquela com a chave 
	não sai.

- Para quem já trabalhou com banco de dados e usou transações sabe que exatamente isso é uma 
	das caraterísticas delas. Transações possuem as caraterísticas ACID que vão além da 
	funcionalidade syncronized:
	    A de Atômico (é isso que syncronized faz)
	    C de Consistente
	    I de Isolado
	    D de Durável 

---------

    * Um Thread pode ter um nome;
    * Podemos pegar o Thread atual através do método Thread.currentThread();
    * Para sincronizar threads, devemos utilizar um bloco synchronized;
    * O synchronized significa que bloqueamos o objeto para outros threads;
    * A sincronização é feita através de mutex, que nada mais é do que a chave do objeto.

---------

Estados da Thread

    * NEW Uma thread foi criada mas ainda não foi iniciada.
    * RUNNABLE A thread está rodando dentro da JVM.
    * BLOCKED A thread foi bloqueada pois não conseguiu pegar a chave.
    * WAITING A thread está esperando pois foi chamado this.wait().
    * TIMED_WAITING A thread está esperando pois foi chamado this.wait(milis).
    * TERMINATED A thread está finalizada.

--------

Thread A - wait - trava a execução para aguardar algo
Thread B - notifyAll - avisão que pode prosseguir

--------

* O que acontece se o método wait() for chamado fora de um método ou bloco synchronized?
	É jogado uma exceção em tempo de execução do tipo java.lang.IllegalMonitorStateException.
	A documentação da exceção diz: Thrown to indicate that a thread has attempted to wait on 
	an object's monitor or to notify other threads waiting on an object's monitor without 
	owning the specified monitor (Lançado para indicar que uma thread tentou esperar no 
	monitor de um objeto ou notificar outros threads em espera no monitor de um objeto sem
	possuir o monitor especificado).

	A palavra monitor podemos traduzir como chave do objeto. Ou seja, a exceção acontece quando 
	chamamos wait() ou notify() e não temos a chave em mãos (fora do bloco synchronized)!

--------

* Threads daemon são como prestadores de serviços para outras threads. Elas são usadas para dar apoio à 
	tarefas e só são necessárias rodar quando as threads "normais" ainda estão sendo executadas. 
	Uma thread daemon não impede a JVM de terminar desde que não existem mais threads principais 
	em execução. Um exemplo de uma thread daemon é o coletor de lixo da JVM (Garbage Collector) 
	ou a nossa limpeza do banheiro.

--------

    * Ao chamar object.wait() a thread fica no estado de espera
    * Estado de espera significa WAITING no mundo de threads
    * Uma thread esperando pode ser notificada pelo método object.notifyAll()
    * Existem daemon threads para executar tarefas ou serviços secundários
    * daemons serão automaticamente desligados quando todas as outras threads terminarem