Anotações - Fundamentos de Microsserviços

- Cada microsserviço deve ser o dono e gerenciar seus próprios dados;

- Não necessariamente divide o mesmo servidor com o DB;

- Componentes do microsserviço: API, banco de dados, processador de mensagens;

- Uma máquina (servidor) pode ser considerada um componente. Várias aplicações 
	em uma mesma máquina podem ser vários componentes. Um serviço de apoio 
	(como banco de dados ou fila de mensageria) pode ser um componente. 
	Qualquer coisa que efetivamente componha o serviço, é um componente.

- Microsserviços são independentes;

- Expõe alguma forma de comunicação (API), que é o contrato com seus clientes;

- Manter evolução:
	- Apenas modificações aditivas, novos endpoints e campos (opcionais);
	- Versionamento de APIs, ao lançar a V2, a V1 deve continuar funcionando;
	- Manter equipes separadas para cada serviço, a mesma equipe não vai alterar
	os clientes e dependências de funcionalidades devem ser solicitadas
	formalmente.

- Limites entre serviços:
	- Monolith first
	- Cada módulo pode ser separado em um microsserviço;
	- DDD, bounded contexts podem virar microsserviços;

- Cuidar do host, físico e virtual. Sistema operacionais;
	- Máquinas virtuais, fácil de provisionar, mas é caro;
	- Sistema em cloud, conforme evolui, custo benefício é maior;
	- Cointainers, mais leve que MV e consegue subir vários serviços;
	
- Etapas para um novo serviço:
	- Repositório de versionamento;
	-CI e CD (integração e entrega contínua);
	- Processo automatizado e testes;
	- Padrão, para que seja adaptável a novos serviços;

- Padronizando a criação:
	- Criação de logs (formato e destino);
	- Verificação de status (health check);
	- Monitoramento de métricas;
	- Busca por configuração e secrets;

- Cointainers:
	- Uma espécie de template e tendo uma imagem base para containers 
	que conterão microsserviçis;
	- Depois, basta codificar e rodas os códigos nos containers criados.

- Possíveis problemas:
	- Dependências descontroladas;
	- Falhas em cascata;
	- Performance prejudicada;

- Através do API Gateway podemos monitorar acessos a nossa aplicação, podemos 
	ter uma ideia geral de erros que estejam acontecendo, monitorar 
	performance, etc.

- Como se comunicar:
	- HTTP;
	- gRPC - chamada de função remota, síncrona, em outros servidores;
	- Protocolos personalizados;

- Problema da abordagem síncrona:
	- Ao realizar uma chamada direta para outro serviço e esperar sua 
	resposta, problemas neste outro serviço nos afetarão diretamente;
	- É a mais comum;

- Comunicação assíncrona:
	- Não obter mensagem/reposta imediatamente;
	- Comunicação indireta;
	- CQRS (background tasks);
	- Eventos (mensageria);

- Microsserviços possuem operações intensas em rede. A probabilidade de falha 
	é grande;

- Falhas em comunicação síncrona: Circuit breaker / cache;

- Flhas em comunicação assíncrona: 
	- Simples retry;
	- Retry com back-off;
	- Fila de mensagens mortas;
	- Mensagens devem poder ser lidas fora de ordem;
	- Mensagens devem poder ser recebidas repetidamente (idempotência);

- Service descovery:
	- Microsserviços podem estar na mesma rede ou em redes separadas, e cada
	serviço pode estar exposto por um IP;
	- Lidar com diretamente com o IP pode trazer problemas;

- DNS:
	- Não públicos;
	- Pode ser utilizados como service registry para saber como acessar cada
	serviço;
	- Registro de nomes de domínios;
	- Acessar quais informações sobre quais processos ou máquinas estão de pé
	e sem falha;
	- Docker e Kubernetes;

- Segurança geral
	- Segurança no transporte: HTTPS;
	- Segurança em repouso:
		- Criptografia: criptografia de disco, banco de dados cifrados,
		criptografia em back-ups;
		- Anonimização;
	- Segurança no destino: Md5 e Argon2;

- Autenticação e autorização:
	 - Autenticação: cada requisição deve informar quem é o cliente. A partir
	dessa informação, nossa aplicação pode decidir se a operação será realizada
	ou não;
	- Técnicas de autenticação: Basic HTTP, tokens (JWT), OAuth, OpenID Connect;
	- Autorização: após a autenticação, verifica quais permissões o usuário possui,
	o que pode fazer nos serviços;
	- Técnicas de autorização: ACL (Access control list, lista de permissões), RBCA 
	(Role-based access control, papel para realizar as ações), on behalf of (quais 
	serviços determinado usuário pode ver, em nome do usuário);
	
- Segurança na rede: com o API Gateway aumenta a segurança, pois conseguimos controlar
	a partir de uma única entrada quem acessa e criar as ações de segurança;
	- Técnicas: Bloqueio por IPs, limitação de acesso;

- Defense in Defth: todas as técnicas são importantes, mesmo que redundantes;
	- Camadas de segurança;
	- Hackers utilizam ferramentas modernas, estudar sobre os possíveis riscos;
	- Equipe de infosec e execute pentests;
	- Automizar verificações de segurança. Fazer requisições com certificado inválidos,
	usuários não autorizados e etc;
	- Monitore e detecte ataques em tempo real;
	- Tenha logs e os sistemas com frequência;

- Deploy:
	- Release pipeline: linha de processos executados para gerar a entrega de um projeto;
	- Pipeline: build, verificações, testes, etc;
	- O microsserviço pode ser implantado em vários ambientes:
		- Desenvolvimento;
		- Staging / QA: testes de performance, smoke tests;
		- Homologação;
		- Produção: por cliente, por região;
	- Configurações parametrizadas:
		- Configurações do ambiente em si: quantidade de recursos, localização;
		- Configurações da aplicação: destino do log, dependências, dados de acesso;

- Estratégias de deploy:
	- Rolling upgrade, atualização sem deixar a aplicação inacessível;
	- Blue-green, mantém duas versões, monitora a nova caso dê tudo certo, descarta a antiga,
	caso contrário, volta com a antiga;
	- Feature toggle, ativa ou desativa a feature para determinado cliente;

	



